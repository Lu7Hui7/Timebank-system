package com.yaru.TimeBank.entity;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class TimeBank extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613cce806100a26000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806316b6c0d7146100b45780631ff8b4801461013d5780632ca15122146101e65780638ec856db1461021557806391a128c21461029e57806394cf795e146103be578063d17ddc0f1461042a578063d3aa4aab1461046d578063e2214d31146104c8578063fc1b608e14610534578063fcce3c3a1461054b575b600080fd5b3480156100c057600080fd5b5061013b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610607565b005b34801561014957600080fd5b506101a4600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610757565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101f257600080fd5b506101fb6109b9565b604051808215151515815260200191505060405180910390f35b34801561022157600080fd5b5061029c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610c46565b005b3480156102aa57600080fd5b506102b3610d97565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156102fb5780820151818401526020810190506102e0565b50505050905090810190601f1680156103285780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019060200280838360005b83811015610364578082015181840152602081019050610349565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156103a657808201518184015260208101905061038b565b50505050905001965050505050505060405180910390f35b3480156103ca57600080fd5b506103d3610fb5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104165780820151818401526020810190506103fb565b505050509050019250505060405180910390f35b34801561043657600080fd5b5061046b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110d3565b005b34801561047957600080fd5b506104ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061122a565b604051808215151515815260200191505060405180910390f35b3480156104d457600080fd5b506104dd611247565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610520578082015181840152602081019050610505565b505050509050019250505060405180910390f35b34801561054057600080fd5b506105496112d5565b005b34801561055757600080fd5b5061058c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061151a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105cc5780820151818401526020810190506105b1565b50505050905090810190601f1680156105f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b6106d58261122a565b1515610749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5468652063686172616374657220646f6573206e6f742065786973740000000081525060200191505060405180910390fd5b61075382826115a9565b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f726571756972652061646d696e0000000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3aaada5836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108c85780820151818401526020810190506108ad565b50505050905090810190601f1680156108f55780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505050506040513d602081101561093e57600080fd5b8101908080519060200190929190505050600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363a9c3d7336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610a7857600080fd5b505af1158015610a8c573d6000803e3d6000fd5b505050506040513d6020811015610aa257600080fd5b81019080805190602001909291905050501515610b27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f796f75206e6f74206973207369676e657200000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663203e4922600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b505050506040513d6020811015610c3057600080fd5b8101908080519060200190929190505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b610d148261122a565b151515610d89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652063686172616374657220616c7265616479206578697374000000000081525060200191505060405180910390fd5b610d938282611693565b5050565b6060806060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360004bd1600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610e7b57600080fd5b505af1158015610e8f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506060811015610eb957600080fd5b810190808051640100000000811115610ed157600080fd5b82810190506020810184811115610ee757600080fd5b8151856001820283011164010000000082111715610f0457600080fd5b50509291906020018051640100000000811115610f2057600080fd5b82810190506020810184811115610f3657600080fd5b8151856020820283011164010000000082111715610f5357600080fd5b50509291906020018051640100000000811115610f6f57600080fd5b82810190506020810184811115610f8557600080fd5b8151856020820283011164010000000082111715610fa257600080fd5b5050929190505050925092509250909192565b6060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394cf795e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561103d57600080fd5b505af1158015611051573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561107b57600080fd5b81019080805164010000000081111561109357600080fd5b828101905060208101848111156110a957600080fd5b81518560208202830111640100000000821117156110c657600080fd5b5050929190505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611198576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b6111a18161122a565b1515611215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5468652063686172616374657220646f6573206e6f742065786973740000000081525060200191505060405180910390fd5b61121e816117e3565b6112278161185d565b50565b60006112408260006119bd90919063ffffffff16565b9050919050565b606060038054806020026020016040519081016040528092919081815260200182805480156112cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611281575b5050505050905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f726571756972652061646d696e0000000000000000000000000000000000000081525060200191505060405180910390fd5b60006113a6611247565b511415151561141d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4974206973206e756c6c0000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61145c336040805190810160405280600981526020017fe7aea1e79086e591980000000000000000000000000000000000000000000000815250610c46565b611464611247565b61146c611f22565b8080602001828103825283818151815260200191508051906020019060200280838360005b838110156114ac578082015181840152602081019050611491565b5050505090500192505050604051809103906000f0801580156114d3573d6000803e3d6000fd5b50905080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606115258261122a565b1515611599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5468652063686172616374657220646f6573206e6f742065786973740000000081525060200191505060405180910390fd5b6115a282611aba565b9050919050565b6115bf82826000611ad79092919063ffffffff16565b7f40cc76cf0e1108ca0d3ff72560b57d4fa36bb58c621240afeeed61973fa973758282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611654578082015181840152602081019050611639565b50505050905090810190601f1680156116815780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6116a982826000611bb09092919063ffffffff16565b60038290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507fa21ece33c1694d2cf1ca545e3ef8ba5c15908cf3cf17440b6fbeacacf77953138282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117a4578082015181840152602081019050611789565b50505050905090810190601f1680156117d15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6117f7816000611ce490919063ffffffff16565b7f04468b77792dfa1e3aa44aa628aa2444cfe6e0f601e813190013034af73c077181604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600080600091505b6003805490508210156119b85760038281548110151561188157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611995578190505b6001600380549050038110156119945760036001820181548110151561190557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561193f57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806001019150506118e3565b5b60038054809190600190036119aa9190611f32565b508180600101925050611865565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f41646472657373206973207a65726f206164647265737300000000000000000081525060200191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060611ad0826000611dc090919063ffffffff16565b9050919050565b611ae183836119bd565b1515611b55576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4164647265737320646f6573206e6f742065786973740000000000000000000081525060200191505060405180910390fd5b808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611baa929190611f5e565b50505050565b611bba83836119bd565b151515611c2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4164647265737320616c7265616479206578697374730000000000000000000081525060200191505060405180910390fd5b60018360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611cde929190611f5e565b50505050565b611cee82826119bd565b1515611d62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4164647265737320646f6573206e6f742065786973740000000000000000000081525060200191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6060611dcc83836119bd565b1515611e40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4164647265737320646f6573206e6f742065786973740000000000000000000081525060200191505060405180910390fd5b8260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f155780601f10611eea57610100808354040283529160200191611f15565b820191906000526020600020905b815481529060010190602001808311611ef857829003601f168201915b5050505050905092915050565b604051611c9f8061200483390190565b815481835581811115611f5957818360005260206000209182019101611f589190611fde565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f9f57805160ff1916838001178555611fcd565b82800160010185558215611fcd579182015b82811115611fcc578251825591602001919060010190611fb1565b5b509050611fda9190611fde565b5090565b61200091905b80821115611ffc576000816000905550600101611fe4565b5090565b905600608060405234801561001057600080fd5b50604051611c9f380380611c9f8339810180604052810190808051820192919050505060008090505b81518110156100ca576000828281518110151561005257fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050806001019050610039565b5050611bc4806100db6000396000f3006080604052600436106200008b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063203e492214620000905780633ffefe4e14620000ee57806360004bd1146200015e57806363a9c3d714620002b457806394cf795e1462000312578063a3aaada51462000383578063fa69efbd146200042f575b600080fd5b3480156200009d57600080fd5b50620000d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200045d565b604051808215151515815260200191505060405180910390f35b348015620000fb57600080fd5b506200011c6004803603810190808035906020019092919050505062000508565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200016b57600080fd5b50620001a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200056a565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015620001ec578082015181840152602081019050620001cf565b50505050905090810190601f1680156200021a5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019060200280838360005b83811015620002585780820151818401526020810190506200023b565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156200029c5780820151818401526020810190506200027f565b50505050905001965050505050505060405180910390f35b348015620002c157600080fd5b50620002f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200071b565b604051808215151515815260200191505060405180910390f35b3480156200031f57600080fd5b506200032a620007c1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156200036f57808201518184015260208101905062000352565b505050509050019250505060405180910390f35b3480156200039057600080fd5b50620003ed600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505062000851565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200043c57600080fd5b506200044762000991565b6040518082815260200191505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff166369e8094b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004c457600080fd5b505af1158015620004d9573d6000803e3d6000fd5b505050506040513d6020811015620004f057600080fd5b81019080805190602001909291905050509050919050565b6000806000805490509050808310156200055f576000838154811015156200052c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915062000564565b600091505b50919050565b60608060608373ffffffffffffffffffffffffffffffffffffffff1663596f21f86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015620005d457600080fd5b505af1158015620005e9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060608110156200061457600080fd5b8101908080516401000000008111156200062d57600080fd5b828101905060208101848111156200064457600080fd5b81518560018202830111640100000000821117156200066257600080fd5b505092919060200180516401000000008111156200067f57600080fd5b828101905060208101848111156200069657600080fd5b8151856020820283011164010000000082111715620006b457600080fd5b50509291906020018051640100000000811115620006d157600080fd5b82810190506020810184811115620006e857600080fd5b81518560208202830111640100000000821117156200070657600080fd5b50509291905050509250925092509193909250565b600080600090505b600080549050811015620007b6576000818154811015156200074157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620007aa5760019150620007bb565b80600101905062000723565b600091505b50919050565b606060008054806020026020016040519081016040528092919081815260200182805480156200084757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620007fc575b5050505050905090565b6000808230620008606200099d565b80806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015620008d1578082015181840152602081019050620008b4565b50505050905090810190601f168015620008ff5780820380516001836020036101000a031916815260200191505b509350505050604051809103906000f08015801562000922573d6000803e3d6000fd5b5090507f8b94c7f6b3fadc764673ea85b4bfef3e17ce928d13e51b818ddfa891ad0f1fcc81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a180915050919050565b60008080549050905090565b6040516111ea80620009af83390190560060806040523480156200001157600080fd5b50604051620011ea380380620011ea833981018060405281019080805182019291906020018051906020019092919050505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200009e32620002d8640100000000026401000000009004565b15620001fc578160009080519060200190620000bc929190620003dc565b5060013290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f68a6f2dd22a3385ea4d4fd8b590e4890ff82d99853226c67df889e74dda33e67828260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015620001ba5780820151818401526020810190506200019d565b50505050905090810190601f168015620001e85780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1620002d0565b7f5fab2506db5bd68c3de713fb73321249ea57e4130d6fb55c532f61edc6727ab7828260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200029357808201518184015260208101905062000276565b50505050905090810190601f168015620002c15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50506200048b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363a9c3d7836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156200039857600080fd5b505af1158015620003ad573d6000803e3d6000fd5b505050506040513d6020811015620003c457600080fd5b81019080805190602001909291905050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200041f57805160ff191683800117855562000450565b8280016001018555821562000450579182015b828111156200044f57825182559160200191906001019062000432565b5b5090506200045f919062000463565b5090565b6200048891905b80821115620004845760008160009055506001016200046a565b5090565b90565b610d4f806200049b6000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063596f21f81461007257806369e8094b1461019257806394cf795e146101c1578063963671be1461022d578063dc58ab1114610284575b600080fd5b34801561007e57600080fd5b506100876102df565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156100cf5780820151818401526020810190506100b4565b50505050905090810190601f1680156100fc5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019060200280838360005b8381101561013857808201518184015260208101905061011d565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561017a57808201518184015260208101905061015f565b50505050905001965050505050505060405180910390f35b34801561019e57600080fd5b506101a7610646565b604051808215151515815260200191505060405180910390f35b3480156101cd57600080fd5b506101d66109c6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102195780820151818401526020810190506101fe565b505050509050019250505060405180910390f35b34801561023957600080fd5b50610242610bfc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029057600080fd5b506102c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c22565b604051808215151515815260200191505060405180910390f35b6060806060600060606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa69efbd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050506040513d602081101561039a57600080fd5b81019080805190602001909291905050509250826040519080825280602002602001820160405280156103dc5781602001602082028038833980820191505090505b509150600090505b8281101561050f57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ffefe4e826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561047d57600080fd5b505af1158015610491573d6000803e3d6000fd5b505050506040513d60208110156104a757600080fd5b810190808051906020019092919050505082828151811015156104c657fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506103e4565b6000826001828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b505050505092508080548060200260200160405190810160405280929190818152602001828054801561063157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105e7575b50505050509050955095509550505050909192565b600080600090505b6001805490508110156107985760018181548110151561066a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141561078b577ffcf2bd202c015cb2348d6064af1fe7a3dc404134b63f8950d16e0f52399b06ae600060405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156107745780601f1061074957610100808354040283529160200191610774565b820191906000526020600020905b81548152906001019060200180831161075757829003601f168201915b50509250505060405180910390a1600191506109c2565b808060010191505061064e565b6107a132610c22565b156108cf5760013290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f20816d1858bab038efc3fee7f47dbb0de0e5dc3425549996d36d148220973e02600060405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156108b85780601f1061088d576101008083540402835291602001916108b8565b820191906000526020600020905b81548152906001019060200180831161089b57829003601f168201915b50509250505060405180910390a1600191506109c2565b7f4263d1d87ff73aebbce6fa4c04cd5b0a3cfed5c33e8a4fac06979f94842046f260003260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b5050935050505060405180910390a1600091505b5090565b6060600060606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa69efbd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a5457600080fd5b505af1158015610a68573d6000803e3d6000fd5b505050506040513d6020811015610a7e57600080fd5b8101908080519060200190929190505050925082604051908082528060200260200182016040528015610ac05781602001602082028038833980820191505090505b509150600090505b82811015610bf357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ffefe4e826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b505050506040513d6020811015610b8b57600080fd5b81019080805190602001909291905050508282815181101515610baa57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610ac8565b81935050505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363a9c3d7836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610ce157600080fd5b505af1158015610cf5573d6000803e3d6000fd5b505050506040513d6020811015610d0b57600080fd5b810190808051906020019092919050505090509190505600a165627a7a723058205df452f15e66b6f50e2c46e3fb12b533da2b2a25eafbf9ea24762062255cea9f0029a165627a7a723058209642014571cec6fdb99d442279deb73f7eb78b9bfb55cb4c7f649ed37e6388920029a165627a7a72305820e6c5072da4336810842d52c1197334528ef777a85f115b3bc75f1526ec02716e0029";

    public static final String FUNC_REVISECHARACTER = "reviseCharacter";

    public static final String FUNC_NEWEVI = "newEvi";

    public static final String FUNC_SIGN = "sign";

    public static final String FUNC_ADDCHARACTER = "addCharacter";

    public static final String FUNC_GETEVI = "getEvi";

    public static final String FUNC_GETSIGNERS = "getSigners";

    public static final String FUNC_REMOVECHARACTER = "removeCharacter";

    public static final String FUNC_ISCHARACTER = "isCharacter";

    public static final String FUNC_GETALLCHARATER = "getAllCharater";

    public static final String FUNC_DEPLOYEVI = "deployEvi";

    public static final String FUNC_SEEKCHARACTER = "seekCharacter";

    public static final Event CHARACTERADDED_EVENT = new Event("characterAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CHARACTERREMOVED_EVENT = new Event("characterRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CHARACTERREVISED_EVENT = new Event("characterRevised",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CHARACTERSEEKED_EVENT = new Event("characterSeeked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected TimeBank(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TimeBank(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TimeBank(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TimeBank(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> reviseCharacter(String amount, String _summary) {
        final Function function = new Function(
                FUNC_REVISECHARACTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, amount),
                        new org.web3j.abi.datatypes.Utf8String(_summary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> newEvi(String _evi) {
        final Function function = new Function(
                FUNC_NEWEVI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_evi)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sign() {
        final Function function = new Function(
                FUNC_SIGN,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCharacter(String amount, String _summary) {
        final Function function = new Function(
                FUNC_ADDCHARACTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, amount),
                        new org.web3j.abi.datatypes.Utf8String(_summary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, List<String>, List<String>>> getEvi() {
        final Function function = new Function(FUNC_GETEVI,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<Tuple3<String, List<String>, List<String>>>(function,
                new Callable<Tuple3<String, List<String>, List<String>>>() {
                    @Override
                    public Tuple3<String, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, List<String>, List<String>>(
                                (String) results.get(0).getValue(),
                                convertToNative((List<Address>) results.get(1).getValue()),
                                convertToNative((List<Address>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<List> getSigners() {
        final Function function = new Function(FUNC_GETSIGNERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removeCharacter(String amount) {
        final Function function = new Function(
                FUNC_REMOVECHARACTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isCharacter(String amount) {
        final Function function = new Function(FUNC_ISCHARACTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, amount)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getAllCharater() {
        final Function function = new Function(FUNC_GETALLCHARATER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deployEvi() {
        final Function function = new Function(
                FUNC_DEPLOYEVI,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> seekCharacter(String amount) {
        final Function function = new Function(FUNC_SEEKCHARACTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, amount)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CharacterAddedEventResponse> getCharacterAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHARACTERADDED_EVENT, transactionReceipt);
        ArrayList<CharacterAddedEventResponse> responses = new ArrayList<CharacterAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CharacterAddedEventResponse typedResponse = new CharacterAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.summary = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CharacterAddedEventResponse> characterAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CharacterAddedEventResponse>() {
            @Override
            public CharacterAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHARACTERADDED_EVENT, log);
                CharacterAddedEventResponse typedResponse = new CharacterAddedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.summary = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CharacterAddedEventResponse> characterAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHARACTERADDED_EVENT));
        return characterAddedEventFlowable(filter);
    }

    public List<CharacterRemovedEventResponse> getCharacterRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHARACTERREMOVED_EVENT, transactionReceipt);
        ArrayList<CharacterRemovedEventResponse> responses = new ArrayList<CharacterRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CharacterRemovedEventResponse typedResponse = new CharacterRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CharacterRemovedEventResponse> characterRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CharacterRemovedEventResponse>() {
            @Override
            public CharacterRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHARACTERREMOVED_EVENT, log);
                CharacterRemovedEventResponse typedResponse = new CharacterRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CharacterRemovedEventResponse> characterRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHARACTERREMOVED_EVENT));
        return characterRemovedEventFlowable(filter);
    }

    public List<CharacterRevisedEventResponse> getCharacterRevisedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHARACTERREVISED_EVENT, transactionReceipt);
        ArrayList<CharacterRevisedEventResponse> responses = new ArrayList<CharacterRevisedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CharacterRevisedEventResponse typedResponse = new CharacterRevisedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.summary = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CharacterRevisedEventResponse> characterRevisedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CharacterRevisedEventResponse>() {
            @Override
            public CharacterRevisedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHARACTERREVISED_EVENT, log);
                CharacterRevisedEventResponse typedResponse = new CharacterRevisedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.summary = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CharacterRevisedEventResponse> characterRevisedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHARACTERREVISED_EVENT));
        return characterRevisedEventFlowable(filter);
    }

    public List<CharacterSeekedEventResponse> getCharacterSeekedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHARACTERSEEKED_EVENT, transactionReceipt);
        ArrayList<CharacterSeekedEventResponse> responses = new ArrayList<CharacterSeekedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CharacterSeekedEventResponse typedResponse = new CharacterSeekedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CharacterSeekedEventResponse> characterSeekedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CharacterSeekedEventResponse>() {
            @Override
            public CharacterSeekedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHARACTERSEEKED_EVENT, log);
                CharacterSeekedEventResponse typedResponse = new CharacterSeekedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CharacterSeekedEventResponse> characterSeekedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHARACTERSEEKED_EVENT));
        return characterSeekedEventFlowable(filter);
    }

    @Deprecated
    public static TimeBank load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TimeBank(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TimeBank load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TimeBank(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TimeBank load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TimeBank(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TimeBank load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TimeBank(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TimeBank> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TimeBank.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TimeBank> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TimeBank.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TimeBank> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TimeBank.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TimeBank> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TimeBank.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CharacterAddedEventResponse extends BaseEventResponse {
        public String amount;

        public String summary;
    }

    public static class CharacterRemovedEventResponse extends BaseEventResponse {
        public String amount;
    }

    public static class CharacterRevisedEventResponse extends BaseEventResponse {
        public String amount;

        public String summary;
    }

    public static class CharacterSeekedEventResponse extends BaseEventResponse {
        public String amount;
    }
}
